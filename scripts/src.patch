diff --git a/src/plugins/dpdk/device/node.c b/src/plugins/dpdk/device/node.c
index 4edce1a..d67a2ae 100644
--- a/src/plugins/dpdk/device/node.c
+++ b/src/plugins/dpdk/device/node.c
@@ -29,6 +29,12 @@
 
 #include <dpdk/device/dpdk_priv.h>
 
+
+#include <vppinfra/elog.h>  // L. adding elog functionality
+#include <time.h> //L. , for clock()
+#include <sched.h>	//L. for usleep
+extern vlib_main_t vlib_global_main; //L. to get the vlib main
+
 static char *dpdk_error_strings[] = {
 #define _(n,s) s,
   foreach_dpdk_error
@@ -457,6 +463,7 @@ VLIB_NODE_FN (dpdk_input_node) (vlib_main_t * vm, vlib_node_runtime_t * node,
   vnet_device_input_runtime_t *rt = (void *) node->runtime_data;
   vnet_device_and_queue_t *dq;
   u32 thread_index = node->thread_index;
+  u64 clk; //L. to get the clock cycles
 
   /*
    * Poll all devices on this cpu for input/interrupts.
@@ -470,6 +477,22 @@ VLIB_NODE_FN (dpdk_input_node) (vlib_main_t * vm, vlib_node_runtime_t * node,
       n_rx_packets += dpdk_device_input (vm, dm, xd, node, thread_index,
 					 dq->queue_id);
     }
+  clk = clock();
+
+/*Log event*/
+// Replace and/or change with u32 Vector Size inside the stuct. Also change the %ll
+
+  ELOG_TYPE_DECLARE (e) = {
+    .format = "POS/VEC = %d Clock cycles = %ld",
+    .format_args = "i4i8",
+  };
+  struct {u32 vector_size; u64 clock_cycles;} *ed;
+  ed = ELOG_DATA (&vlib_global_main.elog_main, e);
+  ed->vector_size = n_rx_packets;
+  ed->clock_cycles = clk;
+
+/*End of Log event*/
+
   /* *INDENT-ON* */
   return n_rx_packets;
 }
diff --git a/src/vlib/main.c b/src/vlib/main.c
index ecadc19..4ba6039 100644
--- a/src/vlib/main.c
+++ b/src/vlib/main.c
@@ -46,6 +46,8 @@
 #include <vlib/unix/unix.h>
 #include <vlib/unix/cj.h>
 
+#include <time.h> //L. for clock()
+
 CJ_GLOBAL_LOG_PROTOTYPE;
 
 /* Actually allocate a few extra slots of vector data to support
@@ -1681,6 +1683,8 @@ vlib_main_or_worker_loop (vlib_main_t * vm, int is_main)
   u32 *last_node_runtime_indices = 0;
   u32 frame_queue_check_counter = 0;
 
+  u64 clk; //L. clock cycles
+
   /* Initialize pending node vector. */
   if (is_main)
     {
@@ -1768,6 +1772,25 @@ vlib_main_or_worker_loop (vlib_main_t * vm, int is_main)
 				      /* frame */ 0,
 				      cpu_time_now);
 
+
+      /*Log event*/
+/*************************************************************/
+      // Replace and/or change with u32 Vector Size inside the stuct. Also change the %ll
+      clk = clock();
+
+  ELOG_TYPE_DECLARE (e) = {
+    .format = "POS/VEC = %d Clock cycles = %ld",
+    .format_args = "i4i8",
+  };
+  struct {u32 vector_size; u64 clock_cycles;} *ed;
+  ed = ELOG_DATA (&vlib_global_main.elog_main, e);
+  ed->vector_size = /*1000: START; 2000: STOP; [0,256]: VECTORSIZE */ 1000;
+  ed->clock_cycles = clk;
+/*************************************************************/
+
+
+
+
       /* Next process input nodes. */
       vec_foreach (n, nm->nodes_by_type[VLIB_NODE_TYPE_INPUT])
 	cpu_time_now = dispatch_node (vm, n,
@@ -1913,6 +1936,25 @@ vlib_main_or_worker_loop (vlib_main_t * vm, int is_main)
       /* Record time stamp in case there are no enabled nodes and above
          calls do not update time stamp. */
       cpu_time_now = clib_cpu_time_now ();
+
+
+      /*Log event*/
+/*******************************************************************/
+      // Replace and/or change with u32 Vector Size inside the stuct. Also change the %ll
+      clk = clock();
+  ELOG_TYPE_DECLARE (f) = {
+    .format = "POS/VEC = %d Clock cycles = %ld",
+    .format_args = "i4i8",
+  };
+  struct {u32 vector_size; u64 clock_cycles;} *ed2;
+  ed2 = ELOG_DATA (&vlib_global_main.elog_main, f);
+  ed2->vector_size = /*1000: START; 2000: STOP; [0,256]: VECTORSIZE */ 2000;
+  ed2->clock_cycles = clk;
+/*******************************************************************/
+
+
+
+
     }
 }
 
